/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2019-05-29 13:36:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tipProc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"tipStyle.css\" >\r\n");
      out.write("<title>tipProc</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p class=\"howtogo\">How to go?</p>\r\n");
      out.write("\t<div class=\"howtogo-wrapper\">\r\n");
      out.write("\t\t<h4>킹스크로스 역에 있는 \r\n");
      out.write("\t\t<a class=\"943img\" href=\"img/943img.jpg\">9와 4분의 3번 승강장</a>에서호그와트 급행열차를 타야한다.<br>\r\n");
      out.write("\t\t\t(<a class=\"flycar\" href=\"img/flycar.jpg\">날으는 자동차</a>를 타고 호그와트 급행열차를 따라가거나,호그와트 쪽에서 허가한다면 <a class=\"flue\" href=\"img/flue.PNG\">플루가루</a>를 \r\n");
      out.write("\t\t\t이용해 벽난로를 통해 호그와트 성 내부로 들어갈 수도 있다.)\r\n");
      out.write("\t\t\t<br>하지만 날으는 자동차를 이용할 경우 매우 위험 할 뿐만 아니라 머글에게 마법사의 정페를 노출했다는 이유로 큰 문제가 될 수 있고,<br>\r\n");
      out.write("\t\t\t플루가루를 이용하는 방법은 볼드모트가 또 다시 마법세계를 장악했을 때 사용했던 방법이기에 거의 일어나지 않는 일이라고 보면 된다.\r\n");
      out.write("\t\t\t<br>9와4분의3번 승강장은 킹스크로스 역 9번 승강장과 10번 승강장 사이의 기둥을 통해 들어 갈 수 있다.<br>\r\n");
      out.write("\t\t\t방법은 매우 간단한데, 주변에 머글이 있는지 살펴보고 그냥 카트를 힘껏 밀며 들어가면 된다.<br>\r\n");
      out.write("\t\t\t호그와트로 가는 유일한 이동수단, 호그와트 급행열차인데, 런던의 킹스크로스 역에서 출발해 호그스미드 역에 도착하며\r\n");
      out.write("\t\t\t<br>학생들을 위해 호박파이나 <a class=\"frog\" href=\"img/frog.jpg\">개구리 코촐릿</a>, <a class=\"bean\" href=\"img/bean.jpg\">온갖 맛이 나는 젤리들</a>의 여러가지 간식도 판다.<br>학생들은 약 10시간 동안 호그와트 급행열차를 타고 이동한다.<br>\r\n");
      out.write("\t\t\t호그스미드 역에 처음 도착한 신입생들은 해그리드의 안내를 따라 <a class=\"bote\" href=\"img/bote.PNG\">보트</a>를 타고 호그와트로 이동한다.<br>\r\n");
      out.write("\t\t\t호그와트의 신입생들을 제외한 나머지 학생들은 <a class=\"sestral\" href=\"img/sestral.gif\">세스트랄</a>이 끄는 마차를 타고 호그와트로 들어간다.<br>대부분의 학생들은 마법의 마차를 탄다고 생각하는데, 사실 세스트랄이 오직 죽음을 목격한 사람의 눈에만 보이기 떄문에<br>\r\n");
      out.write("\t\t\t죽음을 목격하지 않은 학생들은 전부 마법 마차를 탄다고 행각한다.<br>\r\n");
      out.write("\t\t\t</h4>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("<p class=\"house\">Hogwarts Houses</p>\r\n");
      out.write("\t<div class=\"house-wrapper\">\r\n");
      out.write("\t<br>\r\n");
      out.write("\t\t<div class=\"teacher-wrapper\">\r\n");
      out.write("\t\t\t<h2 class=\"teacher\">기숙사 배정식은 매우 중요한 의식입니다.<br>\r\n");
      out.write("\t\t\t\t왜냐하면 여러분이 이곳 호그와트에 있는 동안은, 같은 기숙사 동료들과 함께\r\n");
      out.write("\t\t\t\t<br> 가족처럼 지내게 될 것이기 때문입니다.\r\n");
      out.write("\t\t\t\t<br>-맥고나걸 교수-\r\n");
      out.write("\t\t\t</h2>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h4 class=\"house-information\">호그와트 학생에게 있어서, 기숙사는 집이나 다름이 없다.<br>\r\n");
      out.write("\t\t학생들은 기숙사별로 나눠져 수업을 듣고, 퀴디치 경기를 즐기는 등 함께 생활하게 된다.<br>\r\n");
      out.write("\t\t학기 말에는 기숙사 점수를 매겨서 우승컵을 수여하기도 한다.<br>\r\n");
      out.write("\t\t기숙사는, 입학한 후 기숙사 배정식을 통해 <a href=\"img/househat.gif\" class=\"househat\">마법의 분류모자</a>가 배정해준다.<br>\r\n");
      out.write("\t\t호그와트의 창립자 고드릭 그리핀도르, 살라자르 슬리데린, 헬가 후플푸프,로웨나 래번클로는 학교를 세운 뒤 자신들의 이름을 딴 네 개의 기숙사를 설립했다.<br>\r\n");
      out.write("\t\t이 네 개의 기숙사는 창립자가 중요하게 생각했던 이념을 바탕으로 학생들을 받아들인다.<br>\r\n");
      out.write("\t\t기숙사는 크게 남학생 침실, 여학생 침실 그리고 거실로 구성되어있다.<br>\r\n");
      out.write("\t\t하지만 호그와트 기숙사는 여학생은 남학생 침실에 들어 갈 수 있지만 남학생은 여학생 침실에 들어 갈 수 없다는 것을 명심하자.<br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</h4>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2 class=\"Gryffindor\"> ● Gryffindor</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"add-information\">\r\n");
      out.write("\t\t\t<h4>기숙사 창립 이념 : \"용기를 보여주는 아이들만 받아들이자\"</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 동물 : 사자</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 색 : 붉은색, 금색</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 특성 : 용기, 기사도 정신</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 유령 : 목이 달랑달랑한 닉(니콜라스 드 밈스 포르핑턴 경)</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 입구 : 그리핀도르 탑의 뚱보 여인 사진</h4><br>\r\n");
      out.write("\t\t\t<h5>*벽에 걸려있는 액자 속 뚱보 여인에게 정기적으로 바뀌는 기숙사 암호를 말하면 들어 갈 수 있다.</h5><br>\r\n");
      out.write("\t\t\t<h4>기숙사 사감 : 미네르바 맥고나걸</h4><br>\r\n");
      out.write("\t\t\t<h4>그리핀도르의 상징 : <a class=\"knife\" href=\"img/knife.jpg\">그리핀도르의 검</a></h4><br>\r\n");
      out.write("\t\t\t<h5>-그리핀도르이 검은 그리핀도르 기숙사 창립자의 것이었다. 진정한 그리핀도르만이 이 검을 찾아 낼 수 있다고 하며,<br>\r\n");
      out.write("\t\t\t\t대표적으로 이 검을 사용한 사람으로는 해리포터인데 이 검으로 바실리스크를 죽이고,슬리데린의 로켓을 파괴했다.<br>\r\n");
      out.write("\t\t\t\t후에 이 검은 네빌에 의해 <a href=\"img/snake.gif\" class=\"snake\">내기니</a>의 머리를 베는 데에 사용되기도 했다.<br>\r\n");
      out.write("\t\t\t</h5>\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2 class=\"Sliderin\"> ● Slytherin</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"add-information2\">\r\n");
      out.write("\t\t\t<h4>기숙사 창립 이념 : \"순수 혈통의 아이들만 받아들이자\"</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 동물 : 뱀</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 색 : 녹색, 은색</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 특성 : 지략, 교활, 야망</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 유령 : 피투성이 바론</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 입구 : 지하 감옥 벽</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 사감 : 세베루스 스네이프->호레이스 슬러그혼</h4><br>\r\n");
      out.write("\t\t\t<h5>*슬리데린의 창립자 살라자르 슬리데린은 다른 호그와트의 창립자들과의 불화로<br>\r\n");
      out.write("\t\t\t호그와트에 비밀의 방을 만든 후 학교를 떠났으며 파셀통크를 할 수 있다고 알려졌다.</h5><br>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2 class=\"Hufflepuff\"> ● Hufflepuff</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"add-information3\">\r\n");
      out.write("\t\t\t<h4>기숙사 창립 이념 : \"모든 아이들을 차별없이 받아들이자\"</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 동물 : 오소리</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 색 : 노란색, 검은색</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 특성 : 친절, 인내, 관용</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 유령 : 프라이어(쾌활하고 뚱뚱한 수도사)</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 입구 : 부엌</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 사감 : 포모나 스프라우트</h4><br>\r\n");
      out.write("\t\t\t<h5>*후플푸프 학생들이 호그와트 전쟁에 참여한 이유는<br>\r\n");
      out.write("\t\t\t\t다른 기숙사와는 다르게 그것이 '옳기'때문이었다.</h5>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2 class=\"Ravenclaw\"> ● Ravenclawf</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"add-information4\">\r\n");
      out.write("\t\t\t<h4>기숙사 창립 이념 : \"똑똑하고 지혜로운 아이들만 받아들이자\"</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 동물 : 독수리</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 상징 색 : 파란색, 청동색</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 특성 : 지능, 지혜</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 유령 : 회색 여인</h4><br>\r\n");
      out.write("\t\t\t<h5>*회색 여인의 본명은 헬레나 래번클로(래번클로 기숙사 창립자의 딸)</h5><br>\r\n");
      out.write("\t\t\t<h4>기숙사 입구 : 서쪽 탑의 청동 독수리상</h4><br>\r\n");
      out.write("\t\t\t<h4>기숙사 사감 : 필리우스 플리트윅</h4><br>\r\n");
      out.write("\t\t\t<h5>*래번클로 기숙사로 들어가기 위해서는 다른 기숙사처럼 암호를 대는 것이 아니라<br>\r\n");
      out.write("\t\t\t\t청동 독수리상이 내는 문제를 풀어야함.</h5>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
