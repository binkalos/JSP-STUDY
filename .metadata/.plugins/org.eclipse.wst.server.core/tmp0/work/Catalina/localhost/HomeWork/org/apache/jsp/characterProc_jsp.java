/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2019-05-30 14:10:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class characterProc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"characterStyle.css\" >\r\n");
      out.write("<title>Character</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p class=\"character\">Character</p>\r\n");
      out.write("\t<div class=\"harry-wrapper\">\r\n");
      out.write("\t\t<h2 class=\"harry-fullname\">해리 제임스 포터(Harry James Potter)</h2>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<img src=\"img/harry.jpg\" class=\"harryimg\">\r\n");
      out.write("\t\t\t<h4 class=\"harry-information\">\r\n");
      out.write("\t\t\t\t영화에서는 <a href=\"rharry\">다니엘 래드클리프</a>가 해리의 역할을 맡았다.<br>\r\n");
      out.write("\t\t\t\t원작 책 소설 설정상 1980년 7월 31일의 출생하였다.<br>\r\n");
      out.write("\t\t\t\t가장 친한 친구인 <a href=\"img/roan.jpeg\">론 위즐리</a>, <a href=\"img/harrmion.jpg\">헤르미온느 그레인저</a>와 함께 마법 학교 호그와트에 다니고 있으며,<br>\r\n");
      out.write("\t\t\t\t<a href=\"img/g.PNG\">그리핀도르 기숙사</a>에 속해 있다.\r\n");
      out.write("\t\t\t\t<br>마법 세계에서 해리는 살인 저주 아바다 케다브라 저주에서 살아남은 유일한 사람이자,<br>\r\n");
      out.write("\t\t\t\t<a href=\"img/bordmote.jpg\">볼드모트</a>의 몰락을 이끈 인물로 대부분의 마법사들이 그를 알고 있다.<br>\r\n");
      out.write("\t\t\t\t볼드모트는 해리를 죽이는 데에는 실패하였으나, <a href=\"img/harryparemts.jpg\">해리의 부모</a>를 죽이고 집을 파괴하였다. \r\n");
      out.write("\t\t\t\t<br>그러나 해리 포터를 죽이려다 해리의 어머니인<a href=\"img/lilypoter.jpg\"> 릴리 포터</a>의 고대 방어 마법으로 \r\n");
      out.write("\t\t\t\t<br>저주가 반사되어 육신이 소멸되어 사라졌다.\r\n");
      out.write("\t\t\t</h4>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("<div class=\"roan-wrapper\">\r\n");
      out.write("\t\t<h2 class=\"roan-fullname\">로널드 빌리우스 \"론\" 위즐리(Ronald Bilius \"Ron\" Weasley)</h2>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<img src=\"img/roan.jpeg\" class=\"roanimg\">\r\n");
      out.write("\t\t\t<h4 class=\"roan-information\">\r\n");
      out.write("\t\t\t\t호그와트 그리핀도르 기숙사 소속의 학생으로,<br>해리 포터와 헤르미온느 그레인저의 절친한 친구이다.<br>\r\n");
      out.write("\t\t\t\t영화에서 론의 역할은<a href=\"img/rroan.jpg\"> 루퍼트 그린트</a>가 맡았다.<br>\r\n");
      out.write("\t\t\t\t소설 속에서 그는 호리호리하면서 키가 크고 긴 코와 큰 손발을 가졌으며\r\n");
      out.write("\t\t\t\t<br>주근깨가 있는 소년으로 묘사되었다.\r\n");
      out.write("\t\t\t</h4>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"harrmion-wrapper\">\r\n");
      out.write("\t\t<h2 class=\"harrmion-fullname\">헤르미온느 진 그레인저(Hermione Jean Granger 허마이오니 진 그레인저)</h2>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<img src=\"img/harrmion.jpg\" class=\"harrmionimg\">\r\n");
      out.write("\t\t\t<h4 class=\"harrmion-information\">\r\n");
      out.write("\t\t\t\t영화에서는 <a href=\"img/rhaarrmion.jpg\">엠마 왓슨</a>이 이 역할을 맡았다.<br>\r\n");
      out.write("\t\t\t\t호그와트 그리핀도르 소속으로, 해리 포터와 최고의 유대 관계를 맺고 있다.<br>\r\n");
      out.write("\t\t\t\t좋은 성적을 얻기 위해 열심히 노력하지만, 아는 것을 뽐내고 지식을 나누는 것을<br>\r\n");
      out.write("\t\t\t\t너무 좋아해서 친구가 별로 없지만 동학년의 학생들 중에서 가장 뛰어난 마법 능력을 보이는 학생 중 하나이다.\r\n");
      out.write("\t\t\t\t<br>해리, 론과 어울리면서도 규칙을 어기려는 것은 대체로 내키지 않아 하며,\r\n");
      out.write("\t\t\t\t<br>규칙을 어기려 할 때는 대개 이들을 막으려 한다. \r\n");
      out.write("\t\t\t</h4>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"next-wrapper\">\r\n");
      out.write("\t\t<a href=\"characterpage2.jsp\">\r\n");
      out.write("\t\t\t<img src=\"img/next.png\" class=\"next\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
