/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2019-06-19 10:16:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class whatToEat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/TopWrapper.jsp", Long.valueOf(1560936152931L));
    _jspx_dependants.put("/footer.jsp", Long.valueOf(1558674977795L));
    _jspx_dependants.put("/map7.jsp", Long.valueOf(1560818429296L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<style>\r\n");
      out.write(".img{\r\n");
      out.write("\twidth: 200px; height:200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a{\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("}\r\n");
      out.write(".choice-menu-wrapper {\r\n");
      out.write("\tmargin-left: auto;\r\n");
      out.write("    margin-right: auto;\r\n");
      out.write("    max-width: 1040px;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("}\r\n");
      out.write(".map{\r\n");
      out.write("\tmargin-left: auto;\r\n");
      out.write("    margin-right: auto;\r\n");
      out.write("    max-width: 1040px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- Top -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"TopWrapperStyle.css\" >\r\n");

	//로그인 한 사람이라면 userID라는 변수에 해당 아이디가 담기고 그렇지 않으면 null값
	String userid = null;
	if (session.getAttribute("username") != null) {
		userid = (String) session.getAttribute("username");
	}
	
	Connection con = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	String driver = "com.mysql.jdbc.Driver";
	String url = "jdbc:mysql://localhost:3306/mucktip?serverTimezone=UTC&useSSL=false";
	String id = "root";
	String pw = "alflarhkgkrrh1!";

      out.write("\r\n");
      out.write("<!-- 맨위에 top메뉴 공간 개발 나중에 따로 빼놓을 부분-->\r\n");
      out.write("\t\t<nav id=\"top-menu-all\">\r\n");
      out.write("\t\t<div id=\"main-menu\">\r\n");
      out.write("\t\t\t<div class=\"contents-wrapper\">\r\n");
      out.write("\t\t\t\t<div class=\"left-contents-wrapper\">\r\n");
      out.write("\t\t\t\t\t<div class=\"muktip-logo\"></div>\r\n");
      out.write("\t\t\t\t\t<a href=\"firstPage.jsp\" class=\"new-tip\">최신 먹팁</a>\r\n");
      out.write("\t\t\t\t\t<a href=\"recommendTip.jsp\" class=\"good\">추천</a>\r\n");
      out.write("\t\t\t\t</div><!-- left-contents-wrapper -->\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"right-contents-wrapper\">\r\n");
      out.write("\t\t\t\t\t");

						//로그인이 안된 경우
						if (userid == null) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"login-join\"> <!-- 로그인 / 가입 -->\r\n");
      out.write("\t\t\t\t\t\t<a href=\"login.jsp\">로그인</a> /\r\n");
      out.write("\t\t\t\t\t\t<a href=\"join.jsp\">가입</a> <!-- 가입 페이지 미구현 -->\r\n");
      out.write("\t\t\t\t\t</div> <!-- login-join -->\r\n");
      out.write("\t\t\t\t\t");

						} else { //로그인이 된 경우
							
							try {
								Class.forName(driver);
								con = DriverManager.getConnection(url, id, pw);
								
								pstmt = con.prepareStatement("select * from user where id =?");
								pstmt.setString(1, userid);
								rs = pstmt.executeQuery();
								
								if(rs.next()) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"user-menu\" id=\"user-menu\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"dropdown\">\r\n");
      out.write("\t\t\t\t\t\t<button class=\"profile-img-btn\"> <!-- 이미지 버튼(회원 이미지) -->\r\n");
      out.write("\t\t\t\t\t\t\t<img class=\"profile-image\" src=\"img/");
      out.print(rs.getString("profile"));
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t\t<ul class=\"user-menu-list\"> <!-- 메뉴리스트 -->\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"menu-item\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a class=\"menu-link\" href=\"Mypage.jsp?id=");
      out.print(rs.getString("id"));
      out.write("\"> <!-- /유저 이름으로 -->\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<img class=\"menu-icon-mini\" src=\"img/");
      out.print(rs.getString("profile"));
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<span class=\"menu-user-name\">");
      out.print(userid );
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"menu-item\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a class=\"menu-link\" href=\"음식바구니.jsp\" rel=\"nofollow\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img class=\"menu-icon-myfood\" src=\"img/foodbox.png\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span class=\"menu-text-mtfood\">내 음식바구니</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"menu-item\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a class=\"menu-link\"  href=\"logoutProc.jsp\" rel=\"nofollow\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img class=\"menu-icon-logout\" src=\"img/logout.png\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span class=\"menu-text-logout\">로그아웃</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t</ul> <!-- user-menu-list -->\r\n");
      out.write("\t\t\t\t\t\t</div><!-- dropdown -->\r\n");
      out.write("\t\t\t\t\t</div><!-- user-menu -->\r\n");
      out.write("\t\t\t\t\t");

								} //if				
							} catch (Exception e) {
								e.printStackTrace();
							} 
						} //else
					
      out.write("\r\n");
      out.write("\t\t\t\t</div><!-- right-contents-wrapper -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"search-wrapper\">\r\n");
      out.write("\t\t\t\t\t<form class=\"search-form\" action=\"search.jsp\" method=\"get\">\r\n");
      out.write("\t\t\t\t\t\t<table cellpadding=0 cellspacing=0>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<label class=\"input-wrapper\">\r\n");
      out.write("\t\t\t\t\t\t\t<input class=\"search-keyword\" type=\"text\" name=\"keyword\" placeholder=\"검색\" required>\r\n");
      out.write("\t\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<button class=\"search-button\" type=\"submit\">\r\n");
      out.write("\t\t\t\t\t\t\t<a href=\"search.jsp\"><span class=\"ic_search\"></span></a>\r\n");
      out.write("\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t</div><!-- search-wrapper -->\t\t\t\r\n");
      out.write("\t\t</div><!-- contents-wrapper -->\r\n");
      out.write("\t\t</div><!-- main-menu -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- 서브메뉴 -->\r\n");
      out.write("\t\t<div id=\"sub-menu-wrapper\" class=\"show\">\r\n");
      out.write("\t\t\t<ul class=\"sub-contents-wrapper\">\r\n");
      out.write("\t\t\t\t<li class=\"sub-menu selected\" data-text=\"인기\">\r\n");
      out.write("\t\t\t\t\t<a href=\"firstPage.jsp\">인기</a>\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li class=\"sub-menu\" data-text=\"최신\">\r\n");
      out.write("\t\t\t\t\t<a href=\"newPost.jsp\">최신</a>\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li class=\"sub-menu\" data-text=\"TV\">\r\n");
      out.write("\t\t\t\t\t<a href=\"whatToEat.jsp\">뭐먹지?</a>\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li class=\"sub-menu\" data-text=\"추천\">\r\n");
      out.write("\t\t\t\t\t<a href=\"recommendTip.jsp\">추천</a>\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t</ul><!-- sub-contents-wrapper -->\r\n");
      out.write("\t\t</div><!-- sub-menu-wrapper -->\t\r\n");
      out.write("\t\t\r\n");
      out.write("</nav><!-- top-menu-all -->\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"choice-menu-wrapper\">\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<b><p class=\"choice-information\">오늘 뭐 먹지?</p></b>\r\n");
      out.write("\t\t<!-- 한식 -->\r\n");
      out.write("\t\t<a class=\"korean\" href=\"korean.jsp\">\r\n");
      out.write("\t\t\t<img class=\"korean-img img\" src=\"img/korea.png\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t\t<!-- 양식 -->\r\n");
      out.write("\t\t<a class=\"western\" href=\"western.jsp\">\r\n");
      out.write("\t\t\t<img class=\"western-img img\" src=\"img/western.png\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t\t<!-- 중식 -->\r\n");
      out.write("\t\t<a class=\"chinese\" href=\"chinese.jsp\">\r\n");
      out.write("\t\t\t<img class=\"chinese-img img\" src=\"img/china.png\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t\t<!-- 일식 -->\r\n");
      out.write("\t\t<a class=\"chinese\" href=\"japanese.jsp\">\r\n");
      out.write("\t\t\t<img class=\"chinese-img img\" src=\"img/japan.png\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t\t<!-- 분식 -->\r\n");
      out.write("\t\t<a class=\"flourfood\" href=\"flourfood.jsp\">\r\n");
      out.write("\t\t\t<img class=\"flourfood-img img\" src=\"img/flour.png\"> \r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t</div><!-- c-m-w -->\r\n");
      out.write("\t\r\n");
      out.write("\t<b><p class=\"map\">주변 음식점 찾기</p></b>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=7e0762dc22ba650124c959074cc14e7f&libraries=services\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"mapStyle.css\" >\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>맛집검색</title>\r\n");
      out.write("</head>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"map_wrap\">\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("        <div class=\"option\">\r\n");
      out.write("            <div>\r\n");
      out.write("                <form onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("                    키워드 : <input type=\"text\" value=\"미림여자정보과학고 주변 맛집\" id=\"keyword\" size=\"15\"> \r\n");
      out.write("                    <button type=\"submit\">검색하기</button> \r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <hr>\r\n");
      out.write("        <ul id=\"placesList\"></ul>\r\n");
      out.write("        <div id=\"pagination\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=7e0762dc22ba650124c959074cc14e7f&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("// 마커를 담을 배열입니다\r\n");
      out.write("var markers = [];\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new daum.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("var map = new daum.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 장소 검색 객체를 생성합니다\r\n");
      out.write("var ps = new daum.maps.services.Places();  \r\n");
      out.write("\r\n");
      out.write("// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("var infowindow = new daum.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("// 키워드로 장소를 검색합니다\r\n");
      out.write("searchPlaces();\r\n");
      out.write("\r\n");
      out.write("// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("function searchPlaces() {\r\n");
      out.write("\r\n");
      out.write("    var keyword = document.getElementById('keyword').value;\r\n");
      out.write("\r\n");
      out.write("    if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("        alert('키워드를 입력해주세요!');\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("    ps.keywordSearch( keyword, placesSearchCB); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("function placesSearchCB(data, status, pagination) {\r\n");
      out.write("    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("        // 정상적으로 검색이 완료됐으면\r\n");
      out.write("        // 검색 목록과 마커를 표출합니다\r\n");
      out.write("        displayPlaces(data);\r\n");
      out.write("\r\n");
      out.write("        // 페이지 번호를 표출합니다\r\n");
      out.write("        displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("    } else if (status === daum.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("        alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("        return;\r\n");
      out.write("\r\n");
      out.write("    } else if (status === daum.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("        alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("        return;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("function displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("    var listEl = document.getElementById('placesList'), \r\n");
      out.write("    menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("    fragment = document.createDocumentFragment(), \r\n");
      out.write("    bounds = new daum.maps.LatLngBounds(), \r\n");
      out.write("    listStr = '';\r\n");
      out.write("    \r\n");
      out.write("    // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("    removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("    removeMarker();\r\n");
      out.write("    \r\n");
      out.write("    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("\r\n");
      out.write("        // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("        var placePosition = new daum.maps.LatLng(places[i].y, places[i].x),\r\n");
      out.write("            marker = addMarker(placePosition, i), \r\n");
      out.write("            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("\r\n");
      out.write("        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("        bounds.extend(placePosition);\r\n");
      out.write("\r\n");
      out.write("        // 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("        (function(marker, title) {\r\n");
      out.write("            daum.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("                displayInfowindow(marker, title);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            daum.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("                infowindow.close();\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            itemEl.onmouseover =  function () {\r\n");
      out.write("                displayInfowindow(marker, title);\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            itemEl.onmouseout =  function () {\r\n");
      out.write("                infowindow.close();\r\n");
      out.write("            };\r\n");
      out.write("        })(marker, places[i].place_name);\r\n");
      out.write("\r\n");
      out.write("        fragment.appendChild(itemEl);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n");
      out.write("    listEl.appendChild(fragment);\r\n");
      out.write("    menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("    map.setBounds(bounds);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("function getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("    var el = document.createElement('li'),\r\n");
      out.write("    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("                '<div class=\"info\">' +\r\n");
      out.write("                '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("    if (places.road_address_name) {\r\n");
      out.write("        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("    } else {\r\n");
      out.write("        itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("    }\r\n");
      out.write("                 \r\n");
      out.write("      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("                '</div>';           \r\n");
      out.write("\r\n");
      out.write("    el.innerHTML = itemStr;\r\n");
      out.write("    el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("    return el;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("function addMarker(position, idx, title) {\r\n");
      out.write("    var imageSrc = 'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("        imageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("        imgOptions =  {\r\n");
      out.write("            spriteSize : new daum.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("            spriteOrigin : new daum.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("            offset: new daum.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("        },\r\n");
      out.write("        markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("            marker = new daum.maps.Marker({\r\n");
      out.write("            position: position, // 마커의 위치\r\n");
      out.write("            image: markerImage \r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("    return marker;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("function removeMarker() {\r\n");
      out.write("    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("        markers[i].setMap(null);\r\n");
      out.write("    }   \r\n");
      out.write("    markers = [];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("function displayPagination(pagination) {\r\n");
      out.write("    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("        fragment = document.createDocumentFragment(),\r\n");
      out.write("        i; \r\n");
      out.write("\r\n");
      out.write("    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("        var el = document.createElement('a');\r\n");
      out.write("        el.href = \"#\";\r\n");
      out.write("        el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("        if (i===pagination.current) {\r\n");
      out.write("            el.className = 'on';\r\n");
      out.write("        } else {\r\n");
      out.write("            el.onclick = (function(i) {\r\n");
      out.write("                return function() {\r\n");
      out.write("                    pagination.gotoPage(i);\r\n");
      out.write("                }\r\n");
      out.write("            })(i);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        fragment.appendChild(el);\r\n");
      out.write("    }\r\n");
      out.write("    paginationEl.appendChild(fragment);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("// 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("function displayInfowindow(marker, title) {\r\n");
      out.write("    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n");
      out.write("\r\n");
      out.write("    infowindow.setContent(content);\r\n");
      out.write("    infowindow.open(map, marker);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(" // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("function removeAllChildNods(el) {   \r\n");
      out.write("    while (el.hasChildNodes()) {\r\n");
      out.write("        el.removeChild (el.lastChild);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"footerStyle.css\" >\r\n");
      out.write("<div class=\"footer\">\r\n");
      out.write("\t<div class=\"footer-wrqpper\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<div class=\"first-wrapper\">\r\n");
      out.write("\t\t\t<img src=\"img/title.png\" width=\"200\" height=\"130\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- first-wrapper -->\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"second-wrapper\">\r\n");
      out.write("\t\t\t<div class=\"developer-information-wrapper\">\r\n");
      out.write("\t\t\t\t<p class=\"developer\">개발자</p>\r\n");
      out.write("\t\t\t\t<!-- 이 글자가 우리 둘 정보의 위의 가운데에 배치 -->\r\n");
      out.write("\t\t\t\t<div class=\"left-developer\">\r\n");
      out.write("\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t<li>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-name\">이규빈(Lee KyuBeen)</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-tel\">tel:010-9067-0353</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-email\">s2017i34@e-mirim.hs.kr</p>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- left-developer -->\r\n");
      out.write("\t\t\t\t<div class=\"right-developer\">\r\n");
      out.write("\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t<li>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-name\">박혜정(Park HyeJung)</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-tel\">tel:010-7335-3662</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-email\">s2017i27@e-mirim.hs.kr</p>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- right-developer -->\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- developer-information-wrapper -->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- second-wrapper -->\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"third-wrapper\">\r\n");
      out.write("\t\t\t<div class=\"designer-information-wrapper\">\r\n");
      out.write("\t\t\t\t<p class=\"designer\">디자이너</p>\r\n");
      out.write("\t\t\t\t<div class=\"first-designer\">\r\n");
      out.write("\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t<li>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-name\">서지인(Seo JiIn)</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-tel\">tel:010-2565-5186</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"developer-email\">s2017i28@e-mirim.hs.kr</p>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div> <!-- first-designer -->\r\n");
      out.write("\t\t\t</div> <!-- designer-information-wrapper  -->\r\n");
      out.write("\t\t</div><!-- third-wrapper -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div><!-- footer-wrapper -->\r\n");
      out.write("\t\r\n");
      out.write("</div> <!-- footer -->");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
