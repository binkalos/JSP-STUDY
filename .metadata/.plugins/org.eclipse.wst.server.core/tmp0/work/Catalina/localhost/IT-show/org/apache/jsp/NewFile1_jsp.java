/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2019-06-05 04:43:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>날씨</title>\r\n");
      out.write("    <style>\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\r\n");
      out.write("    <script src=\"http://code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("    <script src=\"js/jquery.xdomainajax.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"content\"></div>\r\n");
      out.write("    <script>\r\n");
      out.write("    function getLocation(){\r\n");
      out.write("        if(navigator.geolocation){\r\n");
      out.write("            navigator.geolocation.getCurrentPosition(locationSuccess, locationError, geo_options);\r\n");
      out.write("        }else{\r\n");
      out.write("            console.log(\"지오 로케이션 없음\")\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("    // getLocation\r\n");
      out.write("\r\n");
      out.write("    function locationSuccess(p){\r\n");
      out.write("            var latitude = p.coords.latitude,\r\n");
      out.write("            longitude = p.coords.longitude;\r\n");
      out.write("            var rs = dfs_xy_conv(\"toXY\",latitude,longitude);\r\n");
      out.write("            // 위도/경도 -> 기상청 좌표x / 좌표 y 변환\r\n");
      out.write("            xml2jsonCurrentWth(rs.nx, rs.ny);\r\n");
      out.write("        }\r\n");
      out.write("    // locationSuccess\r\n");
      out.write("\r\n");
      out.write("     function locationError(error){\r\n");
      out.write("            var errorTypes = {\r\n");
      out.write("                0 : \"무슨 에러냥~\",\r\n");
      out.write("                1 : \"허용 안눌렀음\",\r\n");
      out.write("                2 : \"위치가 안잡힘\",\r\n");
      out.write("                3 : \"응답시간 지남\"\r\n");
      out.write("            };\r\n");
      out.write("            var errorMsg = errorTypes[error.code];\r\n");
      out.write("            console.log(errorMsg)\r\n");
      out.write("        }\r\n");
      out.write("        // locationError\r\n");
      out.write("\r\n");
      out.write("        var geo_options = {\r\n");
      out.write("            enableHighAccuracy: true,\r\n");
      out.write("            maximumAge        : 30000,\r\n");
      out.write("            timeout           : 27000\r\n");
      out.write("        };\r\n");
      out.write("        // geo_options\r\n");
      out.write("    // LCC DFS 좌표변환을 위한 기초 자료\r\n");
      out.write("        //\r\n");
      out.write("        var RE = 6371.00877; // 지구 반경(km)\r\n");
      out.write("        var GRID = 5.0; // 격자 간격(km)\r\n");
      out.write("        var SLAT1 = 30.0; // 투영 위도1(degree)\r\n");
      out.write("        var SLAT2 = 60.0; // 투영 위도2(degree)\r\n");
      out.write("        var OLON = 126.0; // 기준점 경도(degree)\r\n");
      out.write("        var OLAT = 38.0; // 기준점 위도(degree)\r\n");
      out.write("        var XO = 43; // 기준점 X좌표(GRID)\r\n");
      out.write("        var YO = 136; // 기1준점 Y좌표(GRID)\r\n");
      out.write("        //\r\n");
      out.write("        // LCC DFS 좌표변환 ( code : \"toXY\"(위경도->좌표, v1:위도, v2:경도), \"toLL\"(좌표->위경도,v1:x, v2:y) )\r\n");
      out.write("        //\r\n");
      out.write("    function dfs_xy_conv(code, v1, v2) {\r\n");
      out.write("        var DEGRAD = Math.PI / 180.0;\r\n");
      out.write("        var RADDEG = 180.0 / Math.PI;\r\n");
      out.write("\r\n");
      out.write("        var re = RE / GRID;\r\n");
      out.write("        var slat1 = SLAT1 * DEGRAD;\r\n");
      out.write("        var slat2 = SLAT2 * DEGRAD;\r\n");
      out.write("        var olon = OLON * DEGRAD;\r\n");
      out.write("        var olat = OLAT * DEGRAD;\r\n");
      out.write("\r\n");
      out.write("        var sn = Math.tan(Math.PI * 0.25 + slat2 * 0.5) / Math.tan(Math.PI * 0.25 + slat1 * 0.5);\r\n");
      out.write("        sn = Math.log(Math.cos(slat1) / Math.cos(slat2)) / Math.log(sn);\r\n");
      out.write("        var sf = Math.tan(Math.PI * 0.25 + slat1 * 0.5);\r\n");
      out.write("        sf = Math.pow(sf, sn) * Math.cos(slat1) / sn;\r\n");
      out.write("        var ro = Math.tan(Math.PI * 0.25 + olat * 0.5);\r\n");
      out.write("        ro = re * sf / Math.pow(ro, sn);\r\n");
      out.write("        var rs = {};\r\n");
      out.write("        if (code == \"toXY\") {\r\n");
      out.write("\r\n");
      out.write("            rs['lat'] = v1;\r\n");
      out.write("            rs['lng'] = v2;\r\n");
      out.write("            var ra = Math.tan(Math.PI * 0.25 + (v1) * DEGRAD * 0.5);\r\n");
      out.write("            ra = re * sf / Math.pow(ra, sn);\r\n");
      out.write("            var theta = v2 * DEGRAD - olon;\r\n");
      out.write("            if (theta > Math.PI) theta -= 2.0 * Math.PI;\r\n");
      out.write("            if (theta < -Math.PI) theta += 2.0 * Math.PI;\r\n");
      out.write("            theta *= sn;\r\n");
      out.write("            rs['nx'] = Math.floor(ra * Math.sin(theta) + XO + 0.5);\r\n");
      out.write("            rs['ny'] = Math.floor(ro - ra * Math.cos(theta) + YO + 0.5);\r\n");
      out.write("        }\r\n");
      out.write("        else {\r\n");
      out.write("            rs['nx'] = v1;\r\n");
      out.write("            rs['ny'] = v2;\r\n");
      out.write("            var xn = v1 - XO;\r\n");
      out.write("            var yn = ro - v2 + YO;\r\n");
      out.write("            ra = Math.sqrt(xn * xn + yn * yn);\r\n");
      out.write("            if (sn < 0.0) - ra;\r\n");
      out.write("            var alat = Math.pow((re * sf/ ra), (1.0/ sn));\r\n");
      out.write("            alat = 2.0 * Math.atan(alat) - Math.PI * 0.5;\r\n");
      out.write("\r\n");
      out.write("            if (Math.abs(xn) <= 0.0) {\r\n");
      out.write("                theta = 0.0;\r\n");
      out.write("            }\r\n");
      out.write("            else {\r\n");
      out.write("                if (Math.abs(yn) <= 0.0) {\r\n");
      out.write("                    theta = Math.PI * 0.5;\r\n");
      out.write("                    if (xn < 0.0) - theta;\r\n");
      out.write("                }\r\n");
      out.write("                else theta = Math.atan2(xn, yn);\r\n");
      out.write("            }\r\n");
      out.write("            var alon = theta / sn + olon;\r\n");
      out.write("            rs['lat'] = alat * RADDEG;\r\n");
      out.write("            rs['lng'] = alon * RADDEG;\r\n");
      out.write("        }\r\n");
      out.write("        return rs;\r\n");
      out.write("    }\r\n");
      out.write("    // dfs_xy_conv\r\n");
      out.write("    function xml2jsonCurrentWth(nx, ny){\r\n");
      out.write("        var today = new Date();\r\n");
      out.write("        var dd = today.getDate();\r\n");
      out.write("        var mm = today.getMonth()+1;\r\n");
      out.write("        var yyyy = today.getFullYear();\r\n");
      out.write("        var hours = today.getHours();\r\n");
      out.write("        var minutes = today.getMinutes();\r\n");
      out.write("        console.log(\"time \" + minutes)\r\n");
      out.write("\r\n");
      out.write("        if(minutes < 30){\r\n");
      out.write("            // 30분보다 작으면 한시간 전 값\r\n");
      out.write("            hours = hours - 1;\r\n");
      out.write("            if(hours < 0){\r\n");
      out.write("                // 자정 이전은 전날로 계산\r\n");
      out.write("                today.setDate(today.getDate() - 1);\r\n");
      out.write("                dd = today.getDate();\r\n");
      out.write("                mm = today.getMonth()+1;\r\n");
      out.write("                yyyy = today.getFullYear();\r\n");
      out.write("                hours = 23;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        if(hours<10) {\r\n");
      out.write("            hours='0'+hours\r\n");
      out.write("        }\r\n");
      out.write("        if(mm<10) {\r\n");
      out.write("            mm='0'+mm\r\n");
      out.write("        }\r\n");
      out.write("        if(dd<10) {\r\n");
      out.write("            dd='0'+dd\r\n");
      out.write("        } \r\n");
      out.write("\r\n");
      out.write("        var _nx = nx,\r\n");
      out.write("        _ny = ny,\r\n");
      out.write("        apikey = \"G%2FXxlCsyEV%2Fy3qKV5MCbpgrWJPwRHqCAzIpQc%2F%2B7nc3oiqK%2FhjtzefX40Dk6UEU4S7V280SjSRr0q4MYXMSQNQ%3D%3D  \",\r\n");
      out.write("        today = yyyy+\"\"+mm+\"\"+dd,\r\n");
      out.write("        basetime = hours + \"00\",\r\n");
      out.write("        fileName = \"http://newsky2.kma.go.kr/service/SecndSrtpdFrcstInfoService/ForecastGrib\";\r\n");
      out.write("        fileName += \"?ServiceKey=\" + apikey;\r\n");
      out.write("        fileName += \"&base_date=\" + today;\r\n");
      out.write("        fileName += \"&base_time=\" + basetime;\r\n");
      out.write("        fileName += \"&nx=\" + _nx + \"&ny=\" + _ny;\r\n");
      out.write("        fileName += \"&pageNo=1&numOfRows=6\";\r\n");
      out.write("        fileName += \"&_type=json\";\r\n");
      out.write("\r\n");
      out.write("        $.ajax({\r\n");
      out.write("        url: fileName,\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        cache: false,\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("            var myXML = rplLine(data.responseText);\r\n");
      out.write("            console.log(myXML)\r\n");
      out.write("            var indexS = myXML.indexOf('\"body\":{\"items\":{'),\r\n");
      out.write("                indexE = myXML.indexOf(\"}]}\"),\r\n");
      out.write("                result = myXML;\r\n");
      out.write("//                result = myXML.substring(indexS, indexE);\r\n");
      out.write("            var jsonObj = $.parseJSON('[' + result + ']'),\r\n");
      out.write("                rainsnow = jsonObj[0].response.body.items.item[0].obsrValue,\r\n");
      out.write("                sky = jsonObj[0].response.body.items.item[4].obsrValue,\r\n");
      out.write("                temp = jsonObj[0].response.body.items.item[5].obsrValue;\r\n");
      out.write("                var contentText = document.getElementById('content');\r\n");
      out.write("            contentText.innerHTML = \"하늘 상태 : \" + sky + \" / 눈 비 상태 : \" + rainsnow + \" / 온도 : \" + temp;\r\n");
      out.write("        },\r\n");
      out.write("        error:function(request,status,error){\r\n");
      out.write("            alert(\"다시 시도해주세요.\\n\" + \"code:\"+request.status+\"\\n\"+\"message:\"+request.responseText+\"\\n\"+\"error:\"+error);\r\n");
      out.write("        }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("    // xml2jsonCurrentWth\r\n");
      out.write("\r\n");
      out.write("    function rplLine(value){\r\n");
      out.write("        if (value != null && value != \"\") {\r\n");
      out.write("            value = value.replace(/\\n/g, \"\");\r\n");
      out.write("            value = value.replace(/<html>/g, \"\");\r\n");
      out.write("            value = value.replace(/<head>/g, \"\");\r\n");
      out.write("            value = value.replace(/<head\\/>/g, \"\");\r\n");
      out.write("            value = value.replace(/<body>/g, \"\");\r\n");
      out.write("            value = value.replace(/<\\/body><\\/html>/g, \"\");\r\n");
      out.write("//            value = value.replace(/<html\\/>/g, \"\");\r\n");
      out.write("        }\r\n");
      out.write("            return value;\r\n");
      out.write("    }\r\n");
      out.write("    // rplLine\r\n");
      out.write("    getLocation();\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
