/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2019-06-17 02:52:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://apis.daum.net/maps/maps3.js?apikey=7e0762dc22ba650124c959074cc14e7f\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.css\" />\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n");
      out.write("<script src=\"http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.js\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("\t#map{\r\n");
      out.write("\r\n");
      out.write("\t\tborder:blue outset 3px;\r\n");
      out.write("\r\n");
      out.write("\t\twidth:98%;\r\n");
      out.write("\r\n");
      out.write("\t\theight:150px;\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// jQuery를 사용을 위한 코드 열기\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   // 버튼 클릭시 콜백함수 호출 \r\n");
      out.write("\r\n");
      out.write("   $(\"button\").click(function(){\r\n");
      out.write("\r\n");
      out.write("      // input 에 입력하는 검색어의 값을 keyWord변수에 담고 한글처리\r\n");
      out.write("\r\n");
      out.write("\tvar keyWord = $(\"#keyWord\").val();\t\t\t\r\n");
      out.write("\r\n");
      out.write("\tkeyWord = encodeURIComponent(keyWord);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 입력된 keyWord변수의 값으로 결과를 내기 위해 URL 끝에 +keyWord 삽입과 url변수 선언\r\n");
      out.write("\r\n");
      out.write("\tvar url = \"https://apis.daum.net/local/v1/search/keyword.json?apikey=7e0762dc22ba650124c959074cc14e7f&query=\"+keyWord; \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                   // AJAX로 프로젝트 외부에 있는거 못가져옴\r\n");
      out.write("\r\n");
      out.write("\t\t\t// (브라우저의 동일 출처 정책)\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t// XML : 자바로 받아서(프록시 서버)\r\n");
      out.write("\r\n");
      out.write("\t\t\t// JSON : 프록시 서버, 서버(다음)에서 JSONP를 적용해놨으면\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// {} => x\r\n");
      out.write("\r\n");
      out.write("\t\t\t// JSON with Padding\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// asdasd({}) => o\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// jQuery에서는 주소뒤에 &callback=?붙이면 사용가능\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       // 위와 같은 이유로 URL 주소로 연결했을 때 제공되는 json 데이터를 이용하기 위한 jQuery내의 getJSON코드\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       $.getJSON(url + \"&callback=?\" , function(json){\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            // json.channel.item; 은 json데이터 내에서 내가 원하는 값에 접근하기 위해\r\n");
      out.write("\r\n");
      out.write("            // Daum API에서 제공해주는 형식 맞게 단계별로 들어가는 코드\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            var items = json.channel.item;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                         // 반복문을 통해 원하는 json값을 뽑아내는 단계. 지금은 위도와 경도를 받기 위해...\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.each(items, function(i, it){\r\n");
      out.write("\r\n");
      out.write("                              // items는 위에 선언해둔 변수, it는 임의로 작성해도 되는 거.\r\n");
      out.write("\r\n");
      out.write("                             // 위도와 경도의 변수를 저장\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar latitude = it.latitude;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar longitude = it.longitude;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif(i == 0){\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tvar container = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tvar options = { //지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tcenter: new daum.maps.LatLng(latitude, longitude), //지도의 중심좌표.\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tlevel: 3 //지도의 레벨(확대, 축소 정도)\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tvar map = new daum.maps.Map(container, options); //지도 생성 및 객체 리턴\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t});\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t});\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("                $(\"#keyWord\").val(\"\");\r\n");
      out.write("\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div data-role=\"page\" data-theme=\"b\">\r\n");
      out.write("\r\n");
      out.write("\t\t<div data-role=\"header\" data-theme=\"b\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<h2>위치검색</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div data-role=\"content\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<input id=\"keyWord\" placeholder=\"키워드\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t<button>검색</button>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div id=\"map\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
